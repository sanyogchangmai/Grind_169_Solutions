Approach 1 - Using recursion

Time = O(2^n) | Space = O(n)

class Solution {
    static int solve(int i, int n) {
        if(i == n) {
            return 1;
        }
        if(i == n-1) {
            return 1;
        }
        int w1 = solve(i+1, n);
        int w2 = solve(i+2, n);
        return w1+w2;
    }
    public int climbStairs(int n) {
        return solve(0, n);
    }
}

--------------------------------------------------------------------------------

Approach 2 - Dynamic Programming - Optimizing using Memoization

Time = O(n) | Space = O(n)

class Solution {
    static int solve(int i, int n, int[] dp) {
        if(i == n) {
            return 1;
        }
        if(i == n-1) {
            return 1;
        }
        if(dp[i] != -1) {
            return dp[i];
        }
        int w1 = solve(i+1, n, dp);
        int w2 = solve(i+2, n, dp);
        dp[i] = w1 + w2;
        return dp[i];
    }
    public int climbStairs(int n) {
        int[] dp = new int[n];
        Arrays.fill(dp, -1);
        return solve(0, n, dp);
    }
}

--------------------------------------------------------------------------------

Approach 2 - Dynamic Programming - Optimizing using Tabulation

Time = O(n) | Space = O(n)

class Solution {
    public int climbStairs(int n) {
        int[] dp = new int[n+1];
        dp[n] = 1;
        dp[n-1] = 1;
        for(int i=n-2; i>=0; i--) {
            dp[i] = dp[i+1] + dp[i+2];
        }
        return dp[0];
    }
}

--------------------------------------------------------------------------------

Approach 2 - Dynamic Programming - Tabulation and space optimized

Time = O(n) | Space = O(n)

class Solution {
    public int climbStairs(int n) {
        int prev = 1;
        int prev1 = 1;
        for(int i=n-1; i>=1; i--) {
            int curr = prev + prev1;
            prev1 = prev;
            prev = curr;
        }
        return prev;
    }
}