Approach 1 - Using Recursion

Time = O(2^n) | Space = O(n)

class Solution{
    static boolean solve(int n, int[] arr, int sum) {
        if(sum == 0) {
            return true;
        }
        if(n == 0) {
            if(sum == arr[0]) {
                return true;
            }
            return false;
        }
        boolean notPick = solve(n-1, arr, sum);
        boolean pick = false;
        if(arr[n] <= sum) {
            pick = solve(n-1, arr, sum-arr[n]);
        }
        return pick || notPick;
    }
    static Boolean isSubsetSum(int N, int arr[], int sum){
        return solve(N-1, arr, sum);
    }
}

--------------------------------------------------------------------------------

Approach 2 - Memoization

Time = O(N*sum) | Space = O(N*sum) + O(n)


class Solution{
    static boolean solve(int n, int[] arr, int sum, int[][] dp) {
        if(sum == 0) {
            return true;
        }
        if(n == 0) {
            if(sum == arr[0]) {
                return true;
            }
            return false;
        }
        if(dp[n][sum] != -1) {
            return dp[n][sum] == 1 ? true : false;
        }
        boolean notPick = solve(n-1, arr, sum, dp);
        boolean pick = false;
        if(arr[n] <= sum) {
            pick = solve(n-1, arr, sum-arr[n], dp);
        }
        dp[n][sum] = pick || notPick ? 1 : 0;
        return pick || notPick;
    }
    static Boolean isSubsetSum(int N, int arr[], int sum){
        int[][] dp = new int[N][sum+1];
        for(int i=0; i<N; i++) {
            Arrays.fill(dp[i], -1);
        }
        return solve(N-1, arr, sum, dp);
    }
}

--------------------------------------------------------------------------------