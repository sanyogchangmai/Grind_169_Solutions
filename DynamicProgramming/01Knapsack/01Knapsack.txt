Approach 1 - Recursion

Time = O(2^n) | Space = O(n)

class Solution 
{ 
    static int solve(int W, int wt[], int val[], int n) {
        if(n == 0) {
            if(W >= wt[0]) {
                return val[0];
            }
            return 0;
        }
        int notPick = 0 + solve(W, wt, val, n-1);
        int pick = Integer.MIN_VALUE;
        if(W >= wt[n]) {
             W -= wt[n];
             pick = val[n] + solve(W, wt, val, n-1);
        }
        return Math.max(pick, notPick);
    }
    static int knapSack(int W, int wt[], int val[], int n) 
    { 
        return solve(W, wt, val, n-1);   
    } 
}

--------------------------------------------------------------------------------

Approach 2

Timme = O(W*n) | Space = O(W*n) + O(N)

class Solution 
{ 
    static int solve(int W, int wt[], int val[], int n, int[][] dp) {
        if(n == 0) {
            if(W >= wt[0]) {
                return val[0];
            }
            return 0;
        }
        if(dp[n][W] != -1) {
            return dp[n][W];
        }
        int notPick = 0 + solve(W, wt, val, n-1, dp);
        int pick = Integer.MIN_VALUE;
        if(W >= wt[n]) {
             W -= wt[n];
             pick = val[n] + solve(W, wt, val, n-1, dp);
             W += wt[n];
        }
        dp[n][W] = Math.max(pick, notPick);
        return dp[n][W];
    }
    static int knapSack(int W, int wt[], int val[], int n) 
    { 
        int[][] dp = new int[n][W+1];
        for(int i=0; i<n; i++) {
            Arrays.fill(dp[i], -1);
        }
        return solve(W, wt, val, n-1, dp); 
    } 
}