Approach 1 - Recursion

Time = O(2^m * 2^n) | Space = O(n)

class Solution {
    static int solve(int n1, String s1, int n2, String s2) {
        if(n1 < 0 || n2 < 0) {
            return 0;
        }
        if(s1.charAt(n1) == s2.charAt(n2)) {
            return 1 + solve(n1-1, s1, n2-1, s2);
        }
        else {
            return 0 + Math.max(solve(n1-1, s1, n2, s2), solve(n1, s1, n2-1, s2));
        }
    }
    public int longestPalindromeSubseq(String s) {
        int n = s.length();
        String s1 = s;
        String s2 = "";
        for(int i=n-1; i>=0; i--) {
            s2 += s.charAt(i);
        }
        return solve(n-1, s1, n-1, s2);
    }
}

--------------------------------------------------------------------------------

Approach 2

class Solution {
    static int solve(int n1, String s1, int n2, String s2, int[][] dp) {
        if(n1 < 0 || n2 < 0) {
            return 0;
        }
        if(dp[n1][n2] != 0) {
            return dp[n1][n2];
        }
        if(s1.charAt(n1) == s2.charAt(n2)) {
            dp[n1][n2] = 1 + solve(n1-1, s1, n2-1, s2, dp);
            return dp[n1][n2];
        }
        else {
            dp[n1][n2] = 0 + Math.max(solve(n1-1, s1, n2, s2, dp), solve(n1, s1, n2-1, s2, dp));
            return dp[n1][n2];
        }
    }
    public int longestPalindromeSubseq(String s) {
        int n = s.length();
        String s1 = s;
        String s2 = "";
        for(int i=n-1; i>=0; i--) {
            s2 += s.charAt(i);
        }
        int[][] dp = new int[n][n];
        return solve(n-1, s1, n-1, s2, dp);
    }
}