Total number of subsequence 2^number

Approach 1 - Recursion (match or not match)

Time = O(2^m * 2^n) | Space = O(n)

class Solution {
    static int solve(int n1, String text1, int n2, String text2) {
        if(n1 < 0 || n2 < 0) {
            return 0;
        }
        if(text1.charAt(n1) == text2.charAt(n2)) {
            return 1 + solve(n1-1, text1, n2-1, text2);
        }
        else {
            return 0 + Math.max(solve(n1-1, text1, n2, text2), solve(n1, text1, n2-1, text2));
        }
    }
    public int longestCommonSubsequence(String text1, String text2) {
        int n1 = text1.length();
        int n2 = text2.length();
        return solve(n1-1, text1, n2-1, text2);
    }
}

--------------------------------------------------------------------------------

Approach 2 - memoization

Time = O(n + n*n) | Space = O(n*n + n)

class Solution {
    static int solve(int n1, String text1, int n2, String text2, int[][] dp) {
        if(n1 < 0 || n2 < 0) {
            return 0;
        }
        if(dp[n1][n2] != -1) {
            return dp[n1][n2];
        }
        if(text1.charAt(n1) == text2.charAt(n2)) {
            dp[n1][n2] = 1 + solve(n1-1, text1, n2-1, text2, dp);
            return dp[n1][n2];
        }
        else {
            dp[n1][n2] = 0 + Math.max(solve(n1-1, text1, n2, text2, dp), solve(n1, text1, n2-1, text2, dp));
            return dp[n1][n2];
        }
    }
    public int longestCommonSubsequence(String text1, String text2) {
        int n1 = text1.length();
        int n2 = text2.length();
        int[][] dp = new int[n1][n2];
        for(int i=0; i<n1; i++) {
            Arrays.fill(dp[i], -1);
        }
        return solve(n1-1, text1, n2-1, text2, dp);
    }
}
