Approach 1 - Using Traversal

Time = O(n*n) | Space = O(n)

class Solution {
    public int[] nextGreaterElements(int[] nums) {
        int[] nge = new int[nums.length];
        Arrays.fill(nge, -1);
        for(int i=0; i<nums.length; i++) {
            int j;
            if(i == nums.length-1) {
                j = 0;
            }
            else {
                j = i+1;
            }
            while(j != i) {
                if(nums[j] > nums[i]) {
                    nge[i] = nums[j];
                    break;
                }
                if(j == nums.length-1) {
                    j = 0;
                }
                else {
                    j++;
                }
            }
        }
        return nge;
    }
}

--------------------------------------------------------------------------------

Approach 2 - Using stack, performing NGE 2 times

Time = O(n) | Space = O(n)

class Solution {
    public int[] nextGreaterElements(int[] nums) {
        int n = nums.length;
        int[] nge = new int[n];
        Stack<Integer> st = new Stack<>();
        for(int i=2*n-1; i>=0; i--) {
            while(st.size() != 0 && nums[st.peek()] <= nums[i%n]) {
                st.pop();
            }
            if(st.size() != 0) {
                nge[i%n] = nums[st.peek()];
            }
            else {
                nge[i%n] = -1;
            }
            st.push(i%n);
        }
        return nge;
    }
}