Approach 1 - Traversal

Time = O(n^3) | Space = O(1)

class Solution {
    static int nextGreater(int j, int num, int[] nums2) {
        for(int i=j+1; i<nums2.length; i++) {
            if(nums2[i] > num) {
                return nums2[i];
            }
        }
        return -1;
    }
    public int[] nextGreaterElement(int[] nums1, int[] nums2) {
        for(int i=0; i<nums1.length; i++) {
            for(int j=0; j<nums2.length; j++) {
                if(nums1[i] == nums2[j]) {
                    nums1[i] = nextGreater(j, nums2[j], nums2);
                    break;
                }
            }
        }
        return nums1;
    }
}

--------------------------------------------------------------------------------

Approach 2 - Traversal but find next greater element of nums2 first

Time = O(n*n) | Space = O(n)

class Solution {
    public int[] nextGreaterElement(int[] nums1, int[] nums2) {
        int[] nge = new int[nums2.length];
        Arrays.fill(nge, -1);
        for(int i=0; i<nums2.length; i++) {
            for(int j=i+1; j<nums2.length; j++) {
                if(nums2[j] > nums2[i]) {
                    nge[i] = nums2[j];
                    break;
                }
            }
        }
        for(int i=0; i<nums1.length; i++) {
            for(int j=0; j<nums2.length; j++) {
                if(nums1[i] == nums2[j]) {
                    nums1[i] = nge[j];
                    break;
                }
            }
        }
        return nums1;
    }
}

--------------------------------------------------------------------------------

Approach 3 - Using Stacks to find nge

Time = O(n*n) | Space = O(n)

class Solution {
    public int[] nextGreaterElement(int[] nums1, int[] nums2) {
        int[] nge = new int[nums2.length];
        Stack<Integer> st = new Stack<>();
        for(int i=nums2.length-1; i>=0; i--) {
            while(st.size() != 0 && st.peek() <= nums2[i]) {
                st.pop();
            }
            if(st.size() != 0) {
                nge[i] = st.peek();
            }
            else {
                nge[i] = -1;
            }
            st.push(nums2[i]);
        }
        for(int i=0; i<nums1.length; i++) {
            for(int j=0; j<nums2.length; j++) {
                if(nums1[i] == nums2[j]) {
                    nums1[i] = nge[j];
                    break;
                }
            }
        }
        return nums1;
    }
}