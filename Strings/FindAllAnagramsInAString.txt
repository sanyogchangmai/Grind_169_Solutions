Approach 1 - At each index generate substring of length p then compare those two string

Time = O(n*nlogn) | Space = O(n)

class Solution {
    public List<Integer> findAnagrams(String s, String p) {
        List<Integer> res = new ArrayList<>();
        int plen = p.length();
        String[] pArray = p.split("");
        Arrays.sort(pArray);
        for(int i=0; i<=s.length()-plen; i++) {
            String str = s.substring(i, i+plen);
            String[] strArray = str.split("");
            Arrays.sort(strArray);
            if(Arrays.equals(strArray, pArray)) {
                res.add(i);
            }
        }
        return res;
    }
}

--------------------------------------------------------------------------------

Approach 2 - At each index generate substring of length p then compare those two string
using Hashmaps

Time = O(s*p) | Space = O(s + p)

class Solution {
    public List<Integer> findAnagrams(String s, String p) {
        List<Integer> res = new ArrayList<>();
        int plen = p.length();
        HashMap<Character, Integer> pmap = new HashMap<>();
        HashMap<Character, Integer> smap = new HashMap<>();
        for(int i=0; i<plen; i++) {
            pmap.put(p.charAt(i), pmap.getOrDefault(p.charAt(i), 0) + 1);
        }
        for(int i=0; i<=s.length()-plen; i++) {
            String str = s.substring(i, i+plen);
            for(int j=0; j<str.length(); j++) {
                smap.put(str.charAt(j), smap.getOrDefault(str.charAt(j), 0) + 1);
            }
            if(pmap.equals(smap)) {
                res.add(i);
            }
            smap.clear();
        }
        return res;
    }
}

--------------------------------------------------------------------------------

Approach 3 - Optimizing using 2 pointers

Time = O(p + s) | Space = O(s + p)

class Solution {
    public List<Integer> findAnagrams(String s, String p) {
        List<Integer> res = new ArrayList<>();
        if(s.length() < p.length()) {
            return res;
        }
        HashMap<Character, Integer> pmap = new HashMap<>();
        HashMap<Character, Integer> smap = new HashMap<>();
        for(int i=0; i<p.length(); i++) {
            pmap.put(p.charAt(i), pmap.getOrDefault(p.charAt(i), 0) + 1);
            smap.put(s.charAt(i), smap.getOrDefault(s.charAt(i), 0) + 1);
        }
        if(pmap.equals(smap)) {
            res.add(0);
        }
        int l = 0;
        for(int r=p.length(); r<s.length(); r++) {
            smap.put(s.charAt(r), smap.getOrDefault(s.charAt(r), 0) + 1);
            smap.put(s.charAt(l), smap.getOrDefault(s.charAt(l), 0) - 1);
            if(smap.get(s.charAt(l)) == 0) {
                smap.remove(s.charAt(l));
            }
            l++;
            if(smap.equals(pmap)) {
                res.add(l);
            }
        }
        return res;
    }
}