Approach 1 - Using Hashmap and Set

Time = O(n) | Space = O(n)

class Solution {
    public boolean wordPattern(String pattern, String s) {
        String[] str = s.split(" ");
        if(pattern.length() != str.length) {
            return false;
        }
        HashMap<Character, String> map = new HashMap<>();
        for(int i=0; i<pattern.length(); i++) {
           if(map.containsKey(pattern.charAt(i))) {
               if(map.get(pattern.charAt(i)).equals(str[i]) == false) {
                   System.out.println(map);
                   return false;
               }
           }
           else {
               map.put(pattern.charAt(i), str[i]);
           } 
        }
        HashSet<Character> set1 = new HashSet<>();
        HashSet<String> set2 = new HashSet<>();
        for(Character ch: map.keySet()) {
            set1.add(ch);
            set2.add(map.get(ch));
        }
        if(set1.size() != set2.size()) {
            return false;
        }
        return true;
    }
}