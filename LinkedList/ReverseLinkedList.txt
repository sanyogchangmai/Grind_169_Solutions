Approach 1 - Using a List to store values and creating a new Linkedlist in reverse order

Time = O(n) | Space = O(n)

class Solution {
    public ListNode reverseList(ListNode head) {
        List<Integer> arr = new ArrayList<>();
        ListNode curr = head;
        while(curr != null) {
            arr.add(curr.val);
            curr = curr.next;
        }
        Collections.reverse(arr);
        ListNode curr1 = head;
        for(int i=0; i<arr.size(); i++) {
            curr1.val = arr.get(i);
            curr1 = curr1.next;
        }
        return head;
    }
}

--------------------------------------------------------------------------------

Approach 2 - Inplace reversal of links

Time = O(n) | Space = O(1)

class Solution {
    public ListNode reverseList(ListNode head) {
        ListNode newHead = null;
        while(head != null) {
            ListNode temp = head.next;
            head.next = newHead;
            newHead = head;
            head = temp;
        }
        return newHead;
    }
}
