Approach 1
Using HashSet

Time = O(n) | Space = O(n)

public class Solution {
    public boolean hasCycle(ListNode head) {
        HashSet<ListNode> set = new HashSet<>();
        
        ListNode curr = head;
        
        while(curr != null) {
            if(set.contains(curr)) {
                return true;
            }
            set.add(curr);
            curr = curr.next;
        }
        
        return false;
    }
}

--------------------------------------------------------------------------------

Approach 2
Using Fast and Slow pointers

Time = O(n) | Space = O(1)

public class Solution {
    public boolean hasCycle(ListNode head) {
        if(head == null || head.next == null) {
            return false;
        }
        ListNode slow = head;
        ListNode fast = head;
        
        while(fast != null && fast.next != null) {
            slow = slow.next;
            fast = fast.next.next;
            if(slow == fast) {
                return true;
            }
        }
        
        return false;
    }
}