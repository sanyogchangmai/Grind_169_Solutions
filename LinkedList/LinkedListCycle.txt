Approach 1 - Using HashSet

Time = O(n) | Space = O(n)

public class Solution {
    public boolean hasCycle(ListNode head) {
        HashSet<ListNode> set = new HashSet<>();
        ListNode curr = head;
        while(curr != null) {
            if(set.contains(curr)) {
                return true;
            }
            set.add(curr);
            curr = curr.next;
        } 
        return false;
    }
}

--------------------------------------------------------------------------------

Approach 2 - Using Hashmaps

Time = O(n) | Space = O(1)

public class Solution {
    public boolean hasCycle(ListNode head) {
        if(head == null) {
            return false;
        }
        HashMap<ListNode, Integer> map = new HashMap<ListNode, Integer>();
        ListNode curr = head;
        while(curr != null) {
            if(map.containsKey(curr)) {
                return true;
            }
            else {
                map.put(curr, map.getOrDefault(map.get(curr), 0) + 1);
            }
            curr = curr.next;
        }
        return false;
    }
}

--------------------------------------------------------------------------------

Approach 3 - Using Fast and Slow pointers

Time = O(n) | Space = O(1)

public class Solution {
    public boolean hasCycle(ListNode head) {
        if(head == null) {
            return false;
        }
        ListNode slow = head;
        ListNode fast = head;
        while(fast.next != null && fast.next.next != null) {
            slow = slow.next;
            fast = fast.next.next;
            if(slow == fast) {
                return true;
            }
        }
        return false;
    }
}