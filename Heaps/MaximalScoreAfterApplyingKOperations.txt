Approach 1 - Greedy Approach

Time = O(n*nlogn) | Space = O(1)

class Solution {
    public long maxKelements(int[] nums, int k) {
        int n = nums.length-1;
        long score = 0;
        for(int i=1; i<=k; i++) {
            Arrays.sort(nums);
            score += nums[n];
            double dividend = nums[n];
            double d = Math.ceil(dividend/3);
            nums[n] = (int)d;
        }
        return score;
    }
}

--------------------------------------------------------------------------------

Approach 2 - Using Max Heaps

Time = O(nlogk) | Space = O(n)

class Solution {
    public long maxKelements(int[] nums, int k) {
        PriorityQueue<Integer> q = new PriorityQueue<>((a,b) -> b-a);
        for(int i=0; i<nums.length; i++) {
            q.offer(nums[i]);
        }
        long score = 0;
        for(int i=1; i<=k; i++) {
            score += q.peek();
            double dividend = q.poll();
            double d = Math.ceil(dividend/3);
            q.offer((int)d);
        }
        return score;
    }
}