Approach 1 - Using extra sapce

Time = O(n) | Space = O(n)

1. copy last k elements of original array in new array
2. copy first n-k elemnts of original array in new array

--------------------------------------------------------------------------------

Approach 1 - Using extra sapce and modular operator

Time = O(n) | Space = O(n)

Note: (index + k) % (size of array) gives the position of element after rotation

class Solution {
    public void rotate(int[] nums, int k) {
        int n = nums.length;
        int[] res = new int[n];
        
        if(n == 1 || n == k) {
            return;
        }
        
        for(int i=0; i<n; i++) {
            int idx = i + k;
            int r = idx % n;
            res[r] = nums[i];
        }
        
        for(int i=0; i<n; i++) {
            nums[i] = res[i];
        }
    }
}

--------------------------------------------------------------------------------

Approach 2 - reversal using 2 pointer but only valid if k < arr size

Time = O(n) | Space = O(1)

1. reverse 0 to n-k
2. reverse n-k+1 to n
3. reverse entire array



class Solution {
    static void reverse(int[] nums, int i, int j) {
        while(i < j) {
            int temp = nums[i];
            nums[i] = nums[j];
            nums[j] = temp;
            i++;
            j--;
        }
    }
    public void rotate(int[] nums, int k) {
        int n = nums.length-1;
        reverse(nums, 0, n-k);
        reverse(nums, n-k+1, n);
        reverse(nums, 0, n);
    }
}