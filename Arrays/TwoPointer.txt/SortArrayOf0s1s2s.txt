Approach 1 - Using sorting algo

Time = O(nlogn) | Space = O(1)

--------------------------------------------------------------------------------

Approach 1 - 3 pointers

1. start with 3 pointers low=0, mid=0, high=lastIndex
2. switch mid -
3. case 0 - swap low and mid, low++, mid++
4. case 1 - mid++
5. case 2 - swap mid and high, high--

Time = O(n) | Space = O(1)

class Solution {
    public void sortColors(int[] nums) {
        int low = 0;
        int mid = 0;
        int high = nums.length - 1;
        
        while(mid <= high) {
            switch(nums[mid]) {
                case 0: {
                    int temp = nums[low];
                    nums[low] = nums[mid];
                    nums[mid] = temp;
                    low++;
                    mid++;
                    break;
                }
                case 1: {
                    mid++;
                    break;
                }
                case 2: {
                    int temp = nums[mid];
                    nums[mid] = nums[high];
                    nums[high] = temp;
                    high--;
                    break;
                }
            }
        }
    }
}