Approach 1 - Generating all subarrays using iteration

Time = O(n*n) | Space = O(1)

class Solution {
    public int maxProfit(int[] prices) {
        int n = prices.length;
        int max = Integer.MIN_VALUE;
        for(int i=0; i<n-1; i++) {
            for(int j=i+1; j<n; j++) {
                int profit = prices[j] - prices[i];
                max = Math.max(max, profit);
            }
        }
        if(max <= 0) {
            return 0;
        }
        return max;
    }
}

--------------------------------------------------------------------------------

Approach 2 - Kadanes Algorithm variation

Time = O(n) | Space = O(1)

class Solution {
    public int maxProfit(int[] prices) {
        int min = Integer.MAX_VALUE;
        int profit = 0;
        for(int i=0; i<prices.length; i++) {
            if(prices[i] < min) {
                min = prices[i];
            }
            if(prices[i] - min > profit) {
                profit = prices[i] - min;
            }
        }
        return profit;
    }
}

