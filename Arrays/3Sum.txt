Approach 1 - Using Traversal

Time = O(n^3*nlogn) | Space = O(1)
class Solution {
    public List<List<Integer>> threeSum(int[] nums) {
        List<List<Integer>> res = new ArrayList<List<Integer>>();
        int n = nums.length;
        for(int i=0; i<n-2; i++) {
            for(int j=i+1; j<n-1; j++) {
                for(int k=j+1; k<n; k++) {
                    if(nums[i] + nums[j] + nums[k] == 0) {
                        List<Integer> arr = new ArrayList<>();
                        arr.add(nums[i]);
                        arr.add(nums[j]);
                        arr.add(nums[k]);
                        Collections.sort(arr);
                        if(res.contains(arr) == false) {
                            res.add(arr);
                        }
                    }
                }
            }
        }
        return res;
    }
}

--------------------------------------------------------------------------------

class Solution {
    public List<List<Integer>> threeSum(int[] nums) {
        List<List<Integer>> res = new ArrayList<List<Integer>>();
        int n = nums.length;
        HashMap<Integer, Integer> map = new HashMap<>();
        for(int i=0; i<n; i++) {
            map.put(nums[i], map.getOrDefault(nums[i], 0) + 1);
        }
        for(int i=0; i<n-2; i++) {
            map.put(nums[i], map.getOrDefault(nums[i], 0) - 1);
            for(int j=i+1; j<n-1; j++) {
                map.put(nums[j], map.getOrDefault(nums[j], 0) - 1);
                if(map.containsKey(-nums[i] - nums[j])) {
                    List<Integer> arr = new ArrayList<>();
                    arr.add(nums[i]);
                    arr.add(nums[j]);
                    arr.add(-nums[i] - nums[j]);
                    Collections.sort(arr);
                    if(res.contains(arr) == false) {
                        res.add(arr);
                    }
                }
                map.put(nums[j], map.getOrDefault(nums[j], 0) + 1);
            }
            map.put(nums[i], map.getOrDefault(nums[i], 0) + 1);
        }
        return res;
    }
}

--------------------------------------------------------------------------------

Approach 3 - Two pointer

Time = O(n*n) | Space = O(1)

class Solution {
    public List<List<Integer>> threeSum(int[] nums) {
        Arrays.sort(nums);
        int n = nums.length;
        List<List<Integer>> res = new ArrayList<List<Integer>>();
        for(int i=0; i<n-2; i++) {
            if(i == 0 || (i > 0 && nums[i] != nums[i-1])) {
                int low = i + 1;
                int high = n - 1;
                int sum = -nums[i];
                while(low < high) {
                    if(nums[low] + nums[high] == sum) {
                        res.add(Arrays.asList(nums[i], nums[low], nums[high]));
                        while(low < high && nums[low] == nums[low+1]) {
                            low++;
                        }
                        while(low < high && nums[high] == nums[high-1]) {
                            high--;
                        }
                        low++;
                        high--;
                    }
                    else if(nums[low] + nums[high] < sum) {
                        low++;
                    }
                    else {
                        high--;
                    }
                }
            }
        }
        return res;
    }
}