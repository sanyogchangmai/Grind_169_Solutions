Approach 1 - Traversal

Time = O(n) | Space = O(1)

class Solution {
    public int[] productExceptSelf(int[] nums) {
        int n = nums.length;
        int[] answer = new int[n];
        for(int i=0; i<n; i++) {
            int product = 1;
            for(int j=0; j<n; j++) {
                if(i != j) {
                    product *= nums[j];
                }
            }
            answer[i] = product;
        }
        return answer;
    }
}

--------------------------------------------------------------------------------
Approach - Using prefix and suffix sum

Time = O(n) | Space = O(n)

class Solution {
    public int[] productExceptSelf(int[] nums) {
        int n = nums.length;
        int[] answer = new int[n];

        int[] prefix = new int[n];
        prefix[0] = 1;
        for(int i=1; i<n; i++) {
            prefix[i] = prefix[i-1] * nums[i-1];
        }

        int[] suffix = new int[n];
        suffix[n-1] = 1;
        for(int i=n-2; i>=0; i--) {
            suffix[i] = suffix[i+1] * nums[i+1];
        }

        for(int i=0; i<n; i++) {
            answer[i] = prefix[i] * suffix[i];
        }

        return answer;
    }
}