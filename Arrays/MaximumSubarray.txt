Approach 1 - Genarating all subarrays using iteration

Time = O(n*n) | Space = O(1)

class Solution {
    public int maxSubArray(int[] nums) {
        int n = nums.length;
        if(n == 1) {
            return nums[0];
        }
        int max = Integer.MIN_VALUE;
        for(int i=0; i<n; i++) {
            int sum = nums[i];
            max = Math.max(max, sum);
            for(int j=i+1; j<n; j++) {
                sum += nums[j];
                max = Math.max(max, sum);
            }
        }
        return max;
    }
}

--------------------------------------------------------------------------------

Approcah 2 - Using Kadanes Algorithm

Time = O(n) | Space = O(1)

class Solution {
    public int maxSubArray(int[] nums) {
        int n = nums.length;
        int max = Integer.MIN_VALUE;
        int sum = 0;
        for(int i=0; i<n; i++) {
            sum += nums[i];
            max = Math.max(max, sum);
            if(sum < 0) {
                sum = 0; // for fresh start
            }
        }
        return max;
    }
}

