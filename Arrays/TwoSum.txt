Approah 1 - Using traversal

Time = O(n*n) | Space = O(1)

class Solution {
    public int[] twoSum(int[] nums, int target) {
           
        for(int i=0; i<nums.length-1; i++) {
            for(int j=i+1; j<nums.length; j++) {
                if(nums[i] + nums[j] == target) {
                    res[0] = i;
                    res[1] = j;
                    break;
                }
            }
        }
        return res;
    }
}

--------------------------------------------------------------------------------

Approach 2 - Using While loop

Time = O(n*n) | Space = O(1)

class Solution {
    public int[] twoSum(int[] nums, int target) {
        int n = nums.length;
        int[] res = new int[2];
        int i = 0;
        int j = 1;
        while(true) {
            if(nums[i] + nums[j] == target) {
                res[0] = i;
                res[1] = j;
                break;
            }
            if(j == n-1) {
                i++;
                j = i + 1;
            }
            else {
                j++;
            }
        }
        return res;
    }
}

--------------------------------------------------------------------------------

Approach 2 - Using Hash Table

Time = O(n) | Space = O(n)

class Solution {
    public int[] twoSum(int[] nums, int target) {
        int[] res = new int[2];
        HashMap<Integer, Integer> map = new HashMap<>();
        for(int i=0; i<nums.length; i++) {
            int n = target - nums[i];
            if(map.containsKey(n)) {
                res[0] = i;
                res[1] = map.get(n);
            }
            map.put(nums[i], i);
        }
        return res;
    }
}