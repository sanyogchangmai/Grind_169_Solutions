class Solution {
    static boolean doOverlap(List<Integer> t1, List<Integer> t2) {
        int start = Math.max(t1.get(0), t2.get(0));
        int end = Math.min(t1.get(1), t2.get(1));
        if(end - start >= 0) {
            return true;
        }
        return false;
    }

    static List<Integer> merge(List<Integer> t1, List<Integer> t2) {
        List<Integer> temp = new ArrayList<>();
        temp.add(Math.min(t1.get(0), t2.get(0)));
        temp.add(Math.max(t1.get(1), t2.get(1)));
        return temp;
    }

    public int[][] insert(int[][] intervals, int[] newInterval) {
        if(intervals.length == 0) {
            int[][] temp = new int[1][2];
            temp[0][0] = newInterval[0];
            temp[0][1] = newInterval[1];
            return temp;
        }
        List<List<Integer>> res = new ArrayList<List<Integer>>();
        for(int i=0; i<intervals.length; i++) {
            List<Integer> temp = new ArrayList<>();
            temp.add(intervals[i][0]);
            temp.add(intervals[i][1]);
            res.add(temp);
        }

        for(int i=0; i<res.size(); i++) {
            if(newInterval[0] <= res.get(i).get(0)) {
                List<Integer> temp = new ArrayList<>();
                temp.add(newInterval[0]);
                temp.add(newInterval[1]);
                res.add(i, temp);
                break;
            }
            else {
                if(i == res.size()-1) {
                    List<Integer> temp = new ArrayList<>();
                    temp.add(newInterval[0]);
                    temp.add(newInterval[1]);
                    res.add(temp);
                    break;
                }
            }
        }
        
        List<List<Integer>> arr = new ArrayList<List<Integer>>();
        arr.add(res.get(0));

        for(int i=1; i<res.size(); i++) {
            List<Integer> temp1 = res.get(i);
            List<Integer> temp2 = arr.get(arr.size()-1);
            if(doOverlap(temp1, temp2)) {
                arr.remove(arr.size()-1);
                arr.add(merge(temp1, temp2));
            }
            else {
                arr.add(res.get(i));
            }
        }
        
        int n = arr.size();
        int[][] ans = new int[n][2];
        for(int i=0; i<n; i++) {
            for(int j=0; j<2; j++) {
                ans[i][j] = arr.get(i).get(j);
            }
        }
        return ans;
    }
}