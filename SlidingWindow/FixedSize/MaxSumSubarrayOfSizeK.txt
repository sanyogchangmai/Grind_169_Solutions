Approach 1 - Naive solution

Time = O(n*n) | Space = O(1)

class Solution{
    static long maximumSumSubarray(int K, ArrayList<Integer> Arr,int N){
        long max = 0;
        for(int i=0; i<=N-K; i++) {
            long sum = 0;
            for(int j=i; j<i+K; j++) {
                sum += Arr.get(j);
            }
            max = Math.max(sum, max);
        }
        return max;
    }
}

--------------------------------------------------------------------------------

Approach 2 - Sliding Window

Time = O(n) | Space = O(1)

class Solution{
    static long maximumSumSubarray(int K, ArrayList<Integer> Arr,int N){
        long max = 0;
        long sum = 0;
        int start = 0;
        int end = 0;
        while(end < N) {
            sum += Arr.get(end);
            if(end - start + 1 < K) {
                end++;
            }
            else {
                max = Math.max(sum, max);
                sum -= Arr.get(start);
                start++;
                end++;
            }
        }
        return max;
    }
}