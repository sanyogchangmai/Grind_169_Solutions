Approach 1 - Naive

Time = O(n*n) | Space = O(1)

class Solution
{
    //Function to find maximum of each subarray of size k.
    static ArrayList <Integer> max_of_subarrays(int arr[], int n, int k)
    {
        ArrayList<Integer> res = new ArrayList<Integer>();
        for(int i=0; i<=n-k; i++) {
            int max = -1;
            for(int j=i; j<i+k; j++) {
                max = Math.max(arr[j], max);
            }
            res.add(max);
        }
        return res;
    }
}

--------------------------------------------------------------------------------

Approach 2 - Sliding window

Time = O(n) | Space = O(k)

class Solution
{
    //Function to find maximum of each subarray of size k.
    static ArrayList <Integer> max_of_subarrays(int arr[], int n, int k)
    {
        ArrayList<Integer> res = new ArrayList<Integer>();
        PriorityQueue<Integer> pq = new PriorityQueue<Integer>((a,b) -> b - a);
        int start = 0;
        int end = 0;
        while(end < n) {
            pq.offer(arr[end]);
            if(end - start + 1 < k) {
                end++;
            }
            else {
                res.add(pq.peek());
                pq.remove(arr[start]);
                start++;
                end++;
            }
        }
        return res;
    }
}

