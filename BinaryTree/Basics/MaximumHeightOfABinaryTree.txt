Approach 1 - Using recursion

Time = O(n) | Space = O(n)

class Solution {
    public int maxDepth(TreeNode root) {
        if(root == null) {
            return 0;
        }
        int leftHeight = maxDepth(root.left);
        int rightHeight = maxDepth(root.right);
        return Math.max(leftHeight, rightHeight) + 1;
    }
}

--------------------------------------------------------------------------------

Approach 2 - Using queue

Time = O(n*d) | Space = O(d)
where d is no. of nodes in longest row of Binary Tree

class Solution {
    public int maxDepth(TreeNode root) {
        int height = 0;
        if(root == null) {
            return height;
        }
        Queue<TreeNode> q = new LinkedList<>();
        q.offer(root);
        while(q.size() != 0) {
            int n = q.size();
            height++;
            for(int i=0; i<n; i++) {
                TreeNode temp = q.poll();
                if(temp.left != null) {
                    q.offer(temp.left);
                }
                if(temp.right != null) {
                    q.offer(temp.right);
                }
            }
        }
        return height;
    }
}