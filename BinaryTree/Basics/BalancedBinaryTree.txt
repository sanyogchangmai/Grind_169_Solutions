Approach 1 - BFS

Time = O(n) | Space = O(n)

class Solution {
    static int getHeight(TreeNode root) {
        if(root == null) {
            return 0;
        }
        int leftHeight = getHeight(root.left);
        int rightHeight = getHeight(root.right);
        return Math.max(leftHeight, rightHeight) + 1;
    }
    public boolean isBalanced(TreeNode root) {
        if(root == null) {
            return true;
        }
        Queue<TreeNode> q = new LinkedList<>();
        q.offer(root);
        while(q.size() != 0) {
            TreeNode curr = q.poll();
            int leftHeight = getHeight(curr.left);
            int rightHeight = getHeight(curr.right);
            if(Math.abs(leftHeight - rightHeight) > 1) {
                return false;
            }
            if(curr.left != null) {
                q.offer(curr.left);
            }
            if(curr.right != null) {
                q.offer(curr.right);
            }
        }
        return true;
    }
}

--------------------------------------------------------------------------------

Approach 2 - Using recursion