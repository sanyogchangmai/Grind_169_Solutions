Approach 1 - Using BFS

Time = O(n * d) | Space = O(d)
where d is no. of nodes in the longest row of Binary Tree


class Solution {
    public List<Integer> largestValues(TreeNode root) {
        List<Integer> res = new ArrayList<>();
        if(root == null) {
            return res;
        }
        Queue<TreeNode> q = new LinkedList<TreeNode>();
        q.offer(root);
        while(q.size() != 0) {
            int n = q.size();
            int max = Integer.MIN_VALUE;
            for(int i=0; i<n; i++) {
                TreeNode temp = q.poll();
                max = Math.max(max, temp.val);
                if(temp.left != null) {
                    q.offer(temp.left);
                }
                if(temp.right != null) {
                    q.offer(temp.right);
                }
            }
            res.add(max);
        }
        return res;
    }
}