Approach 1 - Traversal

Time = O(n*n) | Space = O(n)

class Solution
{
    public static ArrayList<Integer> countEleLessThanOrEqual(int arr1[], int arr2[], int m, int n)
    {
        ArrayList<Integer> res = new ArrayList<>();
        for(int i=0; i<arr1.length; i++) {
            int count = 0;
            for(int j=0; j<arr2.length; j++) {
                if(arr2[j] <= arr1[i]) {
                   count++;
                }
            }
            res.add(count);
        }
        return res;
    }
}

--------------------------------------------------------------------------------

Approach 2 - For every element in arr1 we perform BS in arr2 and find the last 
occurence index and handle the absent elements

Time = O(nlogn + mlogn = (m+n)logn) | Space = O(m)

class Solution
{
    static int bSearch(int[] arr, int target) {
        int low = 0;
        int high = arr.length-1;
        int lastPos = -1;
        while(low <= high) {
            int mid = low + (high - low) / 2;
            if(arr[mid] <= target) {
                low = mid + 1;
                lastPos = mid;
            }
            else {
                high = mid - 1;
            }
        }
        return lastPos;
    }
    public static ArrayList<Integer> countEleLessThanOrEqual(int arr1[], int arr2[], int m, int n)
    {
        ArrayList<Integer> res = new ArrayList<>();
        Arrays.sort(arr2);
        for(int i=0; i<arr1.length; i++) {
            int num = bSearch(arr2, arr1[i]);
            res.add(num + 1);
        }
        return res;
    }
}

-------------------------------------OR-----------------------------------------

class Solution
{
    static int bSearch(int[] arr, int target) {
        if(target > arr[arr.length-1]) {
            return arr.length-1;
        }
        if(target < arr[0]) {
            return -1;
        }
        int low = 0;
        int high = arr.length-1;
        int lastPos = -1;
        int mid = -1;
        while(low <= high) {
            mid = low + (high - low) / 2;
            if(arr[mid] == target) {
                lastPos = mid;
                low = mid + 1;
            }
            else if(target < arr[mid]) {
                if(arr[mid-1] < target) {
                    return mid-1;
                }
                high = mid - 1;
            }
            else {
                if(arr[mid+1] > target) {
                    return mid;
                }
                low = mid + 1;
            }
        }
        return lastPos;
    }
    public static ArrayList<Integer> countEleLessThanOrEqual(int arr1[], int arr2[], int m, int n)
    {
        ArrayList<Integer> res = new ArrayList<>();
        Arrays.sort(arr2);
        for(int i=0; i<arr1.length; i++) {
            int num = bSearch(arr2, arr1[i]);
            res.add(num + 1);
        }
        return res;
    }
}