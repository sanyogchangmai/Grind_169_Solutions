Approach 1 - Simple linear search

Time = O(n) | Space = O(1)

--------------------------------------------------------------------------------

Approach 2 - If the array is rotated, find the breakpoint and perform 
Binary Search on two parts

Time = O(n + logn) | Space = O(1)

class Solution {
    static int bSearch(int low, int high, int target, int[] nums) {
        while(low <= high) {
            int mid = low + (high - low) / 2;
            if(nums[mid] == target) {
                return mid;
            }
            else if(target < nums[mid]) {
                high = mid - 1;
            }
            else {
                low = mid + 1;
            }
        }
        return -1;
    }
    public int search(int[] nums, int target) {
        int n = nums.length;
        int pos = -1;
        for(int i=1; i<n; i++) {
            if(nums[i] < nums[i-1]) {
                pos = i;
                break;
            }
        }
        if(pos != -1) {
            return Math.max(bSearch(0, pos-1, target, nums), bSearch(pos, n-1, target, nums));
        }
        else {
            return bSearch(0, n-1, target, nums);
        }
    }
}

---------------------------- OR ------------------------------

Little more Time Optimized

class Solution {
    static int bSearch(int low, int high, int target, int[] nums) {
        while(low <= high) {
            int mid = low + (high - low) / 2;
            if(nums[mid] == target) {
                return mid;
            }
            else if(target < nums[mid]) {
                high = mid - 1;
            }
            else {
                low = mid + 1;
            }
        }
        return -1;
    }
    public int search(int[] nums, int target) {
        int n = nums.length;
        int pos = -1;
        if(nums[0] <=  nums[n-1]) {
            return bSearch(0, n-1, target, nums);
        }
        for(int i=1; i<n; i++) {
            if(nums[i] < nums[i-1]) {
                pos = i;
                return Math.max(bSearch(0, pos-1, target, nums), bSearch(pos, n-1, target, nums));
            }
        }
        return -1;
    }
}

--------------------------------------------------------------------------------
Approach 3 - Repeated Binary Search

Time = O(logn) | Space = O(1)

class Solution {
    public int search(int[] nums, int target) {
        int low = 0;
        int high = nums.length-1;
        
        while(low <= high) {
            int mid = low + (high - low) / 2;
            if(nums[mid] == target) {
                return mid;
            }
            if(nums[low] <= nums[mid]){
                if(target >= nums[low] && target < nums[mid]) {
                    high = mid - 1;
                }
                else {
                    low = mid + 1;
                }
            }
            else {
                if(target > nums[mid] && target <= nums[high]) {
                    low = mid + 1;
                }
                else {
                    high = mid - 1;
                }
            }
        }
        return -1;
    }
}