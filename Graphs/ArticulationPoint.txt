class Solution
{
    static int timer = 1;
    static void dfs(int node, int parent, boolean[] vis, int[] tin, int[] low, int[] mark, ArrayList<ArrayList<Integer>> adj) {
        vis[node] = true;
        tin[node] = timer;
        low[node] = timer;
        timer++;
        int child = 0;
        for(Integer i: adj.get(node)) {
            if(i == parent) {
                continue;
            }
            if(vis[i] == false) {
                dfs(i, node, vis, tin, low, mark, adj);
                low[node] = Math.min(low[node], low[i]);
                if(low[i] >= tin[node] && parent != -1) {
                    mark[node] = 1;
                }
                child++;
            }
            else {
                low[node] = Math.min(low[node], low[i]);
            }
        }
        // if parent is connected to multiple children its an articulation point
        // checking for parent specifically 
        if(child > 1 && parent == -1) {
            mark[node] = 1;
        }
        return;
    }
    public ArrayList<Integer> articulationPoints(int V,ArrayList<ArrayList<Integer>> adj)
    {
        boolean[] vis = new boolean[V];
        int[] tin = new int[V];
        int[] low = new int[V];
        int[] mark = new int[V];
        ArrayList<Integer> res = new ArrayList<Integer>();
        
        for(int i=0; i<V; i++) {
            if(vis[i] == false) {
                dfs(i, -1, vis, tin, low, mark, adj);
            }
        }
        
        for(int i=0; i<mark.length; i++) {
            if(mark[i] == 1) {
                res.add(i);
            }
        }
        
        if(res.size() == 0) {
            res.add(-1);
        }
        return res;
    }
}