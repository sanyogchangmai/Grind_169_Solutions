Bridge - Any edge when removed divides the graph into 2 or more components

time[] - DFS insertion time
low[] - min. lowest time of insertion of all adjacent nodes apart from parent

Critical Connections in a Network

Approach 1 - Bridges in graph

Time = O(v + 2E) | Space = O(v + 2E) + O(3V)

class Solution {
    static int timer = 1;
    static void dfs(List<List<Integer>> adj, List<List<Integer>> bridges, boolean[] vis, int[] tin, int[] low, int node, int parent) {
        vis[node] = true;
        tin[node] = timer;
        low[node] = timer;
        timer++;
        for(Integer i: adj.get(node)) {
            if(i == parent) {
                continue;
            }
            if(vis[i] == false) {
                dfs(adj, bridges, vis, tin, low, i, node);
                low[node] = Math.min(low[node], low[i]);
                if(low[i] > tin[node]) {
                    bridges.add(Arrays.asList(i, node));
                }
            }
            else {
                // when the adj node is already visited no dfs just update low
                low[node] = Math.min(low[node], low[i]);
            }
        }
        return;
    }
    public List<List<Integer>> criticalConnections(int n, List<List<Integer>> connections) {
        List<List<Integer>> adj = new ArrayList<List<Integer>>();
        for(int i=0; i<n; i++) {
            adj.add(new ArrayList<Integer>());
        }

        for(List<Integer> l: connections) {
            int u = l.get(0);
            int v = l.get(1);
            adj.get(u).add(v);
            adj.get(v).add(u);
        }

        boolean[] vis = new boolean[n];
        int[] tin = new int[n];
        int[] low = new int[n];

        List<List<Integer>> bridges = new ArrayList<List<Integer>>();
        dfs(adj, bridges, vis, tin, low, 0, -1);
        return bridges;
    }
}