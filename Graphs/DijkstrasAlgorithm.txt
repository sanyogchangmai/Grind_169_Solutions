Time = O(ElogV) | Space = O()

class Pair {
    int distance;
    int node;
    Pair(int d, int n) {
        this.distance = d;
        this.node = n;
    }
}
class Solution
{
    static int[] dijkstra(int V, ArrayList<ArrayList<ArrayList<Integer>>> adj, int S)
    {
        PriorityQueue<Pair> pq = new PriorityQueue<Pair>((a,b) -> a.distance - b.distance);
        int[] dist = new int[V];
        for(int i=0; i<V; i++) {
            dist[i] = Integer.MAX_VALUE;
        }
        
        dist[S] = 0;
        pq.offer(new Pair(0, S));
        
        while(pq.size() != 0) {
            int dis = pq.peek().distance;
            int node = pq.peek().node;
            pq.poll();
            
            for(int i=0; i<adj.get(node).size(); i++) {
                int edgeW = adj.get(node).get(i).get(1);
                int adjNode = adj.get(node).get(i).get(0);
                if(dis + edgeW < dist[adjNode]) {
                    dist[adjNode] = dis + edgeW;
                    pq.add(new Pair(dist[adjNode], adjNode));
                }
            }
        }
        return dist;
    }
}