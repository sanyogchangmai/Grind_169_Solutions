Approach - Using BFS traversal

1. To perform BFS we need a queue and ds to mark visited
2. In queue we store the position(row, col) and time when we add it to queue
3. We traverse the given grid, store rooten oranges in queue mark the visited ds
4. We mark rest sof the places with 0
5. We also count the number of fresh oranges for final check later
6. We maintaina variable to count the oranges that we will rott
7. We pop from queue update time and mark the above, below, left and right as rotten if applicable
8. add then mark visited

Time = O(m*n) | Space = O(m*n)

class Pair {
    int row;
    int col;
    int time;
    Pair(int r, int c, int t) {
        this.row = r;
        this.col = c;
        this.time = t;
    }
}
class Solution
{
    
    public int orangesRotting(int[][] grid)
    {
        int m = grid.length;
        int n = grid[0].length;
        Queue<Pair> q = new LinkedList<Pair>();
        int[][] vis = new int[m][n];
        int goodOranges = 0;
        for(int i=0; i<m; i++) {
            for(int j=0; j<n; j++) {
                if(grid[i][j] == 2) {
                    vis[i][j] = 2;
                    q.offer(new Pair(i, j, 0));
                }
                else if(grid[i][j] == 1) {
                    vis[i][j] = 1;
                    goodOranges++;
                }
                else {
                    vis[i][j] = 0;
                }
            }
        }
        
        int time = 0;
        int rottingOranges = 0;
        int[] delrow = {-1, 0, 1, 0};
        int[] delcol = {0, 1, 0, -1};
        while(q.size() != 0) {
            int x = q.peek().row;
            int y = q.peek().col;
            int t = q.peek().time;
            q.poll();
            time = Math.max(time, t);
            for(int i=0; i<4; i++) {
                int r = x + delrow[i];
                int c = y + delcol[i];
                if(r >= 0 && r < m && c >= 0 && c < n && vis[r][c] != 2 && vis[r][c] == 1) {
                    q.offer(new Pair(r, c, time+1));
                    vis[r][c] = 2;
                    rottingOranges++;
                }
            }
            
        }
        if(goodOranges == rottingOranges) {
            return time;
        }
        return -1;
    }
}