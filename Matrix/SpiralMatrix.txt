/*
PROBLEM LINK
https://leetcode.com/problems/spiral-matrix/

PROBLEM STATEMENT
Given an m x n matrix, return all elements of the matrix in spiral order.

LEVEL - Medium

EXAMPLE 1
Input: matrix = [[1,2,3],[4,5,6],[7,8,9]]
Output: [1,2,3,6,9,8,7,4,5]

EXAMPLE 2
Input: matrix = [[1,2,3,4],[5,6,7,8],[9,10,11,12]]
Output: [1,2,3,4,8,12,11,10,9,5,6,7]
*/

Approach
1. We traverse spirally block by block
2. we keep tract of blocks using valiable col and row
3. we keep track of direction using dir variable
4. we keep track of when to stop using col, row and layer var.

class Solution {
    public List<Integer> spiralOrder(int[][] matrix) {
        List<Integer> res = new ArrayList<>();
        
        int m = matrix.length;
        int n = matrix[0].length;
        
        int col = 0;
        int row = 0;
        int layer = 0;
        int dir = 0;
        
        for(int i=0; i<m*n; i++) {
            switch(dir) {
                case 0: 
                    if(col == n - 1 - layer) {
                        res.add(matrix[row][col]);
                        row++;
                        dir = 1;
                    }
                    else {
                        res.add(matrix[row][col]);
                        col++;
                    }
                    break;
                    
                case 1: 
                    if(row == m - 1 - layer) {
                        res.add(matrix[row][col]);
                        col--;
                        dir = 2;
                    }
                    else {
                        res.add(matrix[row][col]);
                        row++;
                    }
                    break;
                    
                case 2: 
                    if(col == layer) {
                        res.add(matrix[row][col]);
                        row--;
                        dir = 3;
                    }
                    else {
                        res.add(matrix[row][col]);
                        col--;
                    }
                    break;
                    
                case 3: 
                    if(row == layer + 1) {
                        res.add(matrix[row][col]);
                        col++;
                        dir = 0;
                        layer++;
                    }
                    else {
                        res.add(matrix[row][col]);
                        row--;
                    }
                    break;
            }
        }
        
        return res;
    }
}